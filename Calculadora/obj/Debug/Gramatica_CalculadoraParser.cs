//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Usuario\Google Drive\UASLP\Semestre X\Fundamentos de Software de Sistemas\Laboratorio\Fundamentos-de-Sistemas\Calculadora\Gramatica_Calculadora.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Calculadora {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Gramatica_CalculadoraParser : Parser {
	public const int
		RSUB=1, COD_OP_F1=2, COD_OP_F2=3, COD_OP_F3=4, REG=5, WORD=6, RESB=7, 
		START=8, RESW=9, END=10, BYTE=11, BASE=12, ARROBA=13, HASHTAG=14, FORMATO4=15, 
		COMA=16, COMILLA=17, NUM=18, MEM_DIR=19, CONSTHEX=20, CONSTCAD=21, FINL=22, 
		WS=23;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_fin = 2, RULE_entrada = 3, RULE_proposiciones = 4, 
		RULE_proposicion = 5, RULE_instruccion = 6, RULE_directiva = 7, RULE_tipodirectiva = 8, 
		RULE_etiqueta = 9, RULE_opinstruccion = 10, RULE_formato = 11, RULE_f1 = 12, 
		RULE_f2 = 13, RULE_f3 = 14, RULE_f4 = 15, RULE_simple3 = 16, RULE_indirecto3 = 17, 
		RULE_inmediato3 = 18, RULE_opdirectiva = 19;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "fin", "entrada", "proposiciones", "proposicion", 
		"instruccion", "directiva", "tipodirectiva", "etiqueta", "opinstruccion", 
		"formato", "f1", "f2", "f3", "f4", "simple3", "indirecto3", "inmediato3", 
		"opdirectiva"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'@'", "'#'", "'+'", null, "'\"'", null, null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RSUB", "COD_OP_F1", "COD_OP_F2", "COD_OP_F3", "REG", "WORD", "RESB", 
		"START", "RESW", "END", "BYTE", "BASE", "ARROBA", "HASHTAG", "FORMATO4", 
		"COMA", "COMILLA", "NUM", "MEM_DIR", "CONSTHEX", "CONSTCAD", "FINL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatica_Calculadora.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Gramatica_CalculadoraParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; inicio();
			State = 41; proposiciones();
			State = 42; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode START() { return GetToken(Gramatica_CalculadoraParser.START, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 50;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; etiqueta();
				State = 45; Match(START);
				State = 46; Match(NUM);
				State = 47; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; proposicion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(Gramatica_CalculadoraParser.END, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fin);
		try {
			State = 58;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; Match(END);
				State = 53; entrada();
				State = 54; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; Match(END);
				State = 57; entrada();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_entrada);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MEM_DIR) {
				{
				State = 60; Match(MEM_DIR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionesContext : ParserRuleContext {
		public ProposicionContext[] proposicion() {
			return GetRuleContexts<ProposicionContext>();
		}
		public ProposicionContext proposicion(int i) {
			return GetRuleContext<ProposicionContext>(i);
		}
		public ProposicionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposiciones; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterProposiciones(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitProposiciones(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposiciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionesContext proposiciones() {
		ProposicionesContext _localctx = new ProposicionesContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_proposiciones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 63; proposicion();
			}
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RSUB) | (1L << COD_OP_F1) | (1L << COD_OP_F2) | (1L << COD_OP_F3) | (1L << WORD) | (1L << RESB) | (1L << START) | (1L << RESW) | (1L << BYTE) | (1L << BASE) | (1L << FORMATO4) | (1L << MEM_DIR))) != 0)) {
				{
				{
				State = 64; proposicion();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposicion);
		try {
			State = 72;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; instruccion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; directiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_instruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; etiqueta();
			State = 75; opinstruccion();
			State = 76; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public TipodirectivaContext tipodirectiva() {
			return GetRuleContext<TipodirectivaContext>(0);
		}
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directiva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; etiqueta();
			State = 79; tipodirectiva();
			State = 80; opdirectiva();
			State = 81; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipodirectivaContext : ParserRuleContext {
		public ITerminalNode BASE() { return GetToken(Gramatica_CalculadoraParser.BASE, 0); }
		public ITerminalNode BYTE() { return GetToken(Gramatica_CalculadoraParser.BYTE, 0); }
		public ITerminalNode WORD() { return GetToken(Gramatica_CalculadoraParser.WORD, 0); }
		public ITerminalNode RESB() { return GetToken(Gramatica_CalculadoraParser.RESB, 0); }
		public ITerminalNode RESW() { return GetToken(Gramatica_CalculadoraParser.RESW, 0); }
		public TipodirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipodirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterTipodirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitTipodirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipodirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipodirectivaContext tipodirectiva() {
		TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_tipodirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WORD) | (1L << RESB) | (1L << RESW) | (1L << BYTE) | (1L << BASE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_etiqueta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MEM_DIR) {
				{
				State = 85; Match(MEM_DIR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public FormatoContext formato() {
			return GetRuleContext<FormatoContext>(0);
		}
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterOpinstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitOpinstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_opinstruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; formato();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoContext : ParserRuleContext {
		public F1Context f1() {
			return GetRuleContext<F1Context>(0);
		}
		public F2Context f2() {
			return GetRuleContext<F2Context>(0);
		}
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context f4() {
			return GetRuleContext<F4Context>(0);
		}
		public FormatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterFormato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitFormato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoContext formato() {
		FormatoContext _localctx = new FormatoContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_formato);
		try {
			State = 94;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COD_OP_F1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; f1();
				}
				break;
			case COD_OP_F2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; f2();
				}
				break;
			case RSUB:
			case COD_OP_F3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; f3();
				}
				break;
			case FORMATO4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; f4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Context : ParserRuleContext {
		public ITerminalNode COD_OP_F1() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F1, 0); }
		public F1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Context f1() {
		F1Context _localctx = new F1Context(_ctx, State);
		EnterRule(_localctx, 24, RULE_f1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(COD_OP_F1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2Context : ParserRuleContext {
		public ITerminalNode COD_OP_F2() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F2, 0); }
		public ITerminalNode[] REG() { return GetTokens(Gramatica_CalculadoraParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(Gramatica_CalculadoraParser.REG, i);
		}
		public ITerminalNode COMA() { return GetToken(Gramatica_CalculadoraParser.COMA, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public F2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2Context f2() {
		F2Context _localctx = new F2Context(_ctx, State);
		EnterRule(_localctx, 26, RULE_f2);
		try {
			State = 108;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; Match(COD_OP_F2);
				State = 99; Match(REG);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; Match(COD_OP_F2);
				State = 101; Match(REG);
				State = 102; Match(COMA);
				State = 103; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; Match(COD_OP_F2);
				State = 105; Match(REG);
				State = 106; Match(COMA);
				State = 107; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3Context : ParserRuleContext {
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirecto3Context indirecto3() {
			return GetRuleContext<Indirecto3Context>(0);
		}
		public Inmediato3Context inmediato3() {
			return GetRuleContext<Inmediato3Context>(0);
		}
		public ITerminalNode RSUB() { return GetToken(Gramatica_CalculadoraParser.RSUB, 0); }
		public F3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3Context f3() {
		F3Context _localctx = new F3Context(_ctx, State);
		EnterRule(_localctx, 28, RULE_f3);
		try {
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; simple3();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; indirecto3();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; inmediato3();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; Match(RSUB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4Context : ParserRuleContext {
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public ITerminalNode[] FORMATO4() { return GetTokens(Gramatica_CalculadoraParser.FORMATO4); }
		public ITerminalNode FORMATO4(int i) {
			return GetToken(Gramatica_CalculadoraParser.FORMATO4, i);
		}
		public F4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4Context f4() {
		F4Context _localctx = new F4Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_f4);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 116; Match(FORMATO4);
				}
				}
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==FORMATO4 );
			State = 121; f3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple3Context : ParserRuleContext {
		public ITerminalNode COD_OP_F3() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F3, 0); }
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ITerminalNode COMA() { return GetToken(Gramatica_CalculadoraParser.COMA, 0); }
		public ITerminalNode REG() { return GetToken(Gramatica_CalculadoraParser.REG, 0); }
		public Simple3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterSimple3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitSimple3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple3Context simple3() {
		Simple3Context _localctx = new Simple3Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_simple3);
		try {
			State = 135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; Match(COD_OP_F3);
				State = 124; Match(MEM_DIR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; Match(COD_OP_F3);
				State = 126; Match(NUM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; Match(COD_OP_F3);
				State = 128; Match(NUM);
				State = 129; Match(COMA);
				State = 130; Match(REG);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; Match(COD_OP_F3);
				State = 132; Match(MEM_DIR);
				State = 133; Match(COMA);
				State = 134; Match(REG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirecto3Context : ParserRuleContext {
		public ITerminalNode COD_OP_F3() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F3, 0); }
		public ITerminalNode ARROBA() { return GetToken(Gramatica_CalculadoraParser.ARROBA, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public Indirecto3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterIndirecto3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitIndirecto3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirecto3Context indirecto3() {
		Indirecto3Context _localctx = new Indirecto3Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_indirecto3);
		try {
			State = 143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; Match(COD_OP_F3);
				State = 138; Match(ARROBA);
				State = 139; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; Match(COD_OP_F3);
				State = 141; Match(ARROBA);
				State = 142; Match(MEM_DIR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmediato3Context : ParserRuleContext {
		public ITerminalNode COD_OP_F3() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F3, 0); }
		public ITerminalNode HASHTAG() { return GetToken(Gramatica_CalculadoraParser.HASHTAG, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public Inmediato3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterInmediato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitInmediato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmediato3Context inmediato3() {
		Inmediato3Context _localctx = new Inmediato3Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_inmediato3);
		try {
			State = 151;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(COD_OP_F3);
				State = 146; Match(HASHTAG);
				State = 147; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; Match(COD_OP_F3);
				State = 149; Match(HASHTAG);
				State = 150; Match(MEM_DIR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ITerminalNode CONSTHEX() { return GetToken(Gramatica_CalculadoraParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(Gramatica_CalculadoraParser.CONSTCAD, 0); }
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_opdirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUM) | (1L << MEM_DIR) | (1L << CONSTHEX) | (1L << CONSTCAD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x19\x9E\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x35"+
		"\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4=\n\x4\x3\x5\x5\x5@\n\x5"+
		"\x3\x6\x3\x6\a\x6\x44\n\x6\f\x6\xE\x6G\v\x6\x3\a\x3\a\x5\aK\n\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x5\vY\n\v\x3\f\x3"+
		"\f\x3\r\x3\r\x3\r\x3\r\x5\r\x61\n\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xFo\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x5\x10u\n\x10\x3\x11\x6\x11x\n\x11\r\x11\xE\x11y\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x8A\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x5\x13\x92\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x9A\n\x14\x3\x15\x3\x15\x3\x15\x2\x2\x2\x16\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2\x2\x4\x5\x2\b\t\v\v\r\xE\x3\x2\x14\x17\x9D\x2*\x3"+
		"\x2\x2\x2\x4\x34\x3\x2\x2\x2\x6<\x3\x2\x2\x2\b?\x3\x2\x2\x2\n\x41\x3\x2"+
		"\x2\x2\fJ\x3\x2\x2\x2\xEL\x3\x2\x2\x2\x10P\x3\x2\x2\x2\x12U\x3\x2\x2\x2"+
		"\x14X\x3\x2\x2\x2\x16Z\x3\x2\x2\x2\x18`\x3\x2\x2\x2\x1A\x62\x3\x2\x2\x2"+
		"\x1Cn\x3\x2\x2\x2\x1Et\x3\x2\x2\x2 w\x3\x2\x2\x2\"\x89\x3\x2\x2\x2$\x91"+
		"\x3\x2\x2\x2&\x99\x3\x2\x2\x2(\x9B\x3\x2\x2\x2*+\x5\x4\x3\x2+,\x5\n\x6"+
		"\x2,-\x5\x6\x4\x2-\x3\x3\x2\x2\x2./\x5\x14\v\x2/\x30\a\n\x2\x2\x30\x31"+
		"\a\x14\x2\x2\x31\x32\a\x18\x2\x2\x32\x35\x3\x2\x2\x2\x33\x35\x5\f\a\x2"+
		"\x34.\x3\x2\x2\x2\x34\x33\x3\x2\x2\x2\x35\x5\x3\x2\x2\x2\x36\x37\a\f\x2"+
		"\x2\x37\x38\x5\b\x5\x2\x38\x39\a\x18\x2\x2\x39=\x3\x2\x2\x2:;\a\f\x2\x2"+
		";=\x5\b\x5\x2<\x36\x3\x2\x2\x2<:\x3\x2\x2\x2=\a\x3\x2\x2\x2>@\a\x15\x2"+
		"\x2?>\x3\x2\x2\x2?@\x3\x2\x2\x2@\t\x3\x2\x2\x2\x41\x45\x5\f\a\x2\x42\x44"+
		"\x5\f\a\x2\x43\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45"+
		"\x46\x3\x2\x2\x2\x46\v\x3\x2\x2\x2G\x45\x3\x2\x2\x2HK\x5\xE\b\x2IK\x5"+
		"\x10\t\x2JH\x3\x2\x2\x2JI\x3\x2\x2\x2K\r\x3\x2\x2\x2LM\x5\x14\v\x2MN\x5"+
		"\x16\f\x2NO\a\x18\x2\x2O\xF\x3\x2\x2\x2PQ\x5\x14\v\x2QR\x5\x12\n\x2RS"+
		"\x5(\x15\x2ST\a\x18\x2\x2T\x11\x3\x2\x2\x2UV\t\x2\x2\x2V\x13\x3\x2\x2"+
		"\x2WY\a\x15\x2\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x15\x3\x2\x2\x2Z[\x5\x18"+
		"\r\x2[\x17\x3\x2\x2\x2\\\x61\x5\x1A\xE\x2]\x61\x5\x1C\xF\x2^\x61\x5\x1E"+
		"\x10\x2_\x61\x5 \x11\x2`\\\x3\x2\x2\x2`]\x3\x2\x2\x2`^\x3\x2\x2\x2`_\x3"+
		"\x2\x2\x2\x61\x19\x3\x2\x2\x2\x62\x63\a\x4\x2\x2\x63\x1B\x3\x2\x2\x2\x64"+
		"\x65\a\x5\x2\x2\x65o\a\a\x2\x2\x66g\a\x5\x2\x2gh\a\a\x2\x2hi\a\x12\x2"+
		"\x2io\a\a\x2\x2jk\a\x5\x2\x2kl\a\a\x2\x2lm\a\x12\x2\x2mo\a\x14\x2\x2n"+
		"\x64\x3\x2\x2\x2n\x66\x3\x2\x2\x2nj\x3\x2\x2\x2o\x1D\x3\x2\x2\x2pu\x5"+
		"\"\x12\x2qu\x5$\x13\x2ru\x5&\x14\x2su\a\x3\x2\x2tp\x3\x2\x2\x2tq\x3\x2"+
		"\x2\x2tr\x3\x2\x2\x2ts\x3\x2\x2\x2u\x1F\x3\x2\x2\x2vx\a\x11\x2\x2wv\x3"+
		"\x2\x2\x2xy\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x5"+
		"\x1E\x10\x2|!\x3\x2\x2\x2}~\a\x6\x2\x2~\x8A\a\x15\x2\x2\x7F\x80\a\x6\x2"+
		"\x2\x80\x8A\a\x14\x2\x2\x81\x82\a\x6\x2\x2\x82\x83\a\x14\x2\x2\x83\x84"+
		"\a\x12\x2\x2\x84\x8A\a\a\x2\x2\x85\x86\a\x6\x2\x2\x86\x87\a\x15\x2\x2"+
		"\x87\x88\a\x12\x2\x2\x88\x8A\a\a\x2\x2\x89}\x3\x2\x2\x2\x89\x7F\x3\x2"+
		"\x2\x2\x89\x81\x3\x2\x2\x2\x89\x85\x3\x2\x2\x2\x8A#\x3\x2\x2\x2\x8B\x8C"+
		"\a\x6\x2\x2\x8C\x8D\a\xF\x2\x2\x8D\x92\a\x14\x2\x2\x8E\x8F\a\x6\x2\x2"+
		"\x8F\x90\a\xF\x2\x2\x90\x92\a\x15\x2\x2\x91\x8B\x3\x2\x2\x2\x91\x8E\x3"+
		"\x2\x2\x2\x92%\x3\x2\x2\x2\x93\x94\a\x6\x2\x2\x94\x95\a\x10\x2\x2\x95"+
		"\x9A\a\x14\x2\x2\x96\x97\a\x6\x2\x2\x97\x98\a\x10\x2\x2\x98\x9A\a\x15"+
		"\x2\x2\x99\x93\x3\x2\x2\x2\x99\x96\x3\x2\x2\x2\x9A\'\x3\x2\x2\x2\x9B\x9C"+
		"\t\x3\x2\x2\x9C)\x3\x2\x2\x2\xF\x34<?\x45JX`nty\x89\x91\x99";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Calculadora
