//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Usuario\Google Drive\UASLP\Semestre X\Fundamentos de Software de Sistemas\Laboratorio\Fundamentos-de-Sistemas\Calculadora\Gramatica_Calculadora.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Calculadora {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Gramatica_CalculadoraParser : Parser {
	public const int
		CONSTHEX=1, CONSTCAD=2, RSUB=3, COD_OP_F1=4, COD_OP_F2=5, COD_OP_F3=6, 
		REG=7, ORG=8, WORD=9, RESB=10, START=11, RESW=12, END=13, BYTE=14, BASE=15, 
		EQU=16, ARROBA=17, HASHTAG=18, FORMATO4=19, COMA=20, COMILLA=21, PARENI=22, 
		PAREND=23, MENOS=24, POR=25, ENTRE=26, NUM=27, MEM_DIR=28, FINL=29, WS=30;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_fin = 2, RULE_entrada = 3, RULE_proposiciones = 4, 
		RULE_proposicion = 5, RULE_instruccion = 6, RULE_directiva = 7, RULE_direqu = 8, 
		RULE_tipodirectiva = 9, RULE_etiqueta = 10, RULE_opinstruccion = 11, RULE_formato = 12, 
		RULE_f1 = 13, RULE_f2 = 14, RULE_f3 = 15, RULE_f4 = 16, RULE_simple3 = 17, 
		RULE_indirecto3 = 18, RULE_inmediato3 = 19, RULE_opdirectiva = 20, RULE_expresion = 21, 
		RULE_expresion2 = 22;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "fin", "entrada", "proposiciones", "proposicion", 
		"instruccion", "directiva", "direqu", "tipodirectiva", "etiqueta", "opinstruccion", 
		"formato", "f1", "f2", "f3", "f4", "simple3", "indirecto3", "inmediato3", 
		"opdirectiva", "expresion", "expresion2"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'@'", "'#'", null, null, "'\"'", null, 
		null, null, null, null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CONSTHEX", "CONSTCAD", "RSUB", "COD_OP_F1", "COD_OP_F2", "COD_OP_F3", 
		"REG", "ORG", "WORD", "RESB", "START", "RESW", "END", "BYTE", "BASE", 
		"EQU", "ARROBA", "HASHTAG", "FORMATO4", "COMA", "COMILLA", "PARENI", "PAREND", 
		"MENOS", "POR", "ENTRE", "NUM", "MEM_DIR", "FINL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatica_Calculadora.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Gramatica_CalculadoraParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; inicio();
			State = 47; proposiciones();
			State = 48; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode START() { return GetToken(Gramatica_CalculadoraParser.START, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 56;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; etiqueta();
				State = 51; Match(START);
				State = 52; Match(NUM);
				State = 53; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; proposicion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(Gramatica_CalculadoraParser.END, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fin);
		try {
			State = 64;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(END);
				State = 59; entrada();
				State = 60; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(END);
				State = 63; entrada();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_entrada);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MEM_DIR) {
				{
				State = 66; Match(MEM_DIR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionesContext : ParserRuleContext {
		public ProposicionContext[] proposicion() {
			return GetRuleContexts<ProposicionContext>();
		}
		public ProposicionContext proposicion(int i) {
			return GetRuleContext<ProposicionContext>(i);
		}
		public ProposicionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposiciones; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterProposiciones(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitProposiciones(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposiciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionesContext proposiciones() {
		ProposicionesContext _localctx = new ProposicionesContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_proposiciones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 69; proposicion();
			}
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RSUB) | (1L << COD_OP_F1) | (1L << COD_OP_F2) | (1L << COD_OP_F3) | (1L << ORG) | (1L << WORD) | (1L << RESB) | (1L << START) | (1L << RESW) | (1L << BYTE) | (1L << BASE) | (1L << EQU) | (1L << FORMATO4) | (1L << MEM_DIR))) != 0)) {
				{
				{
				State = 70; proposicion();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposicion);
		try {
			State = 78;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; instruccion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; directiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_instruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; etiqueta();
			State = 81; opinstruccion();
			State = 82; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public TipodirectivaContext tipodirectiva() {
			return GetRuleContext<TipodirectivaContext>(0);
		}
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public DirequContext direqu() {
			return GetRuleContext<DirequContext>(0);
		}
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directiva);
		try {
			State = 93;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; etiqueta();
				State = 85; tipodirectiva();
				State = 86; opdirectiva();
				State = 87; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; etiqueta();
				State = 90; direqu();
				State = 91; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirequContext : ParserRuleContext {
		public ITerminalNode EQU() { return GetToken(Gramatica_CalculadoraParser.EQU, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ITerminalNode POR() { return GetToken(Gramatica_CalculadoraParser.POR, 0); }
		public DirequContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direqu; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterDirequ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitDirequ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirequ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirequContext direqu() {
		DirequContext _localctx = new DirequContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_direqu);
		try {
			State = 99;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; Match(EQU);
				State = 96; expresion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; Match(EQU);
				State = 98; Match(POR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipodirectivaContext : ParserRuleContext {
		public ITerminalNode BASE() { return GetToken(Gramatica_CalculadoraParser.BASE, 0); }
		public ITerminalNode BYTE() { return GetToken(Gramatica_CalculadoraParser.BYTE, 0); }
		public ITerminalNode WORD() { return GetToken(Gramatica_CalculadoraParser.WORD, 0); }
		public ITerminalNode RESB() { return GetToken(Gramatica_CalculadoraParser.RESB, 0); }
		public ITerminalNode RESW() { return GetToken(Gramatica_CalculadoraParser.RESW, 0); }
		public ITerminalNode ORG() { return GetToken(Gramatica_CalculadoraParser.ORG, 0); }
		public TipodirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipodirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterTipodirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitTipodirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipodirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipodirectivaContext tipodirectiva() {
		TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_tipodirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ORG) | (1L << WORD) | (1L << RESB) | (1L << RESW) | (1L << BYTE) | (1L << BASE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_etiqueta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MEM_DIR) {
				{
				State = 103; Match(MEM_DIR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public FormatoContext formato() {
			return GetRuleContext<FormatoContext>(0);
		}
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterOpinstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitOpinstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_opinstruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; formato();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoContext : ParserRuleContext {
		public F1Context f1() {
			return GetRuleContext<F1Context>(0);
		}
		public F2Context f2() {
			return GetRuleContext<F2Context>(0);
		}
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context f4() {
			return GetRuleContext<F4Context>(0);
		}
		public FormatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterFormato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitFormato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoContext formato() {
		FormatoContext _localctx = new FormatoContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_formato);
		try {
			State = 112;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COD_OP_F1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; f1();
				}
				break;
			case COD_OP_F2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; f2();
				}
				break;
			case RSUB:
			case COD_OP_F3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110; f3();
				}
				break;
			case FORMATO4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111; f4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Context : ParserRuleContext {
		public ITerminalNode COD_OP_F1() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F1, 0); }
		public ITerminalNode FINL() { return GetToken(Gramatica_CalculadoraParser.FINL, 0); }
		public F1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Context f1() {
		F1Context _localctx = new F1Context(_ctx, State);
		EnterRule(_localctx, 26, RULE_f1);
		try {
			State = 117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(COD_OP_F1);
				State = 115; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(COD_OP_F1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2Context : ParserRuleContext {
		public ITerminalNode COD_OP_F2() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F2, 0); }
		public ITerminalNode[] REG() { return GetTokens(Gramatica_CalculadoraParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(Gramatica_CalculadoraParser.REG, i);
		}
		public ITerminalNode COMA() { return GetToken(Gramatica_CalculadoraParser.COMA, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public F2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2Context f2() {
		F2Context _localctx = new F2Context(_ctx, State);
		EnterRule(_localctx, 28, RULE_f2);
		try {
			State = 129;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; Match(COD_OP_F2);
				State = 120; Match(REG);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; Match(COD_OP_F2);
				State = 122; Match(REG);
				State = 123; Match(COMA);
				State = 124; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; Match(COD_OP_F2);
				State = 126; Match(REG);
				State = 127; Match(COMA);
				State = 128; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3Context : ParserRuleContext {
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirecto3Context indirecto3() {
			return GetRuleContext<Indirecto3Context>(0);
		}
		public Inmediato3Context inmediato3() {
			return GetRuleContext<Inmediato3Context>(0);
		}
		public ITerminalNode RSUB() { return GetToken(Gramatica_CalculadoraParser.RSUB, 0); }
		public F3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3Context f3() {
		F3Context _localctx = new F3Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_f3);
		try {
			State = 135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; simple3();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; indirecto3();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; inmediato3();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; Match(RSUB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4Context : ParserRuleContext {
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public ITerminalNode[] FORMATO4() { return GetTokens(Gramatica_CalculadoraParser.FORMATO4); }
		public ITerminalNode FORMATO4(int i) {
			return GetToken(Gramatica_CalculadoraParser.FORMATO4, i);
		}
		public F4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterF4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitF4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4Context f4() {
		F4Context _localctx = new F4Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_f4);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 137; Match(FORMATO4);
				}
				}
				State = 140;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==FORMATO4 );
			State = 142; f3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple3Context : ParserRuleContext {
		public ITerminalNode COD_OP_F3() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F3, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ITerminalNode COMA() { return GetToken(Gramatica_CalculadoraParser.COMA, 0); }
		public ITerminalNode REG() { return GetToken(Gramatica_CalculadoraParser.REG, 0); }
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public Simple3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterSimple3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitSimple3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple3Context simple3() {
		Simple3Context _localctx = new Simple3Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_simple3);
		try {
			State = 154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; Match(COD_OP_F3);
				State = 145; Match(NUM);
				State = 146; Match(COMA);
				State = 147; Match(REG);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; Match(COD_OP_F3);
				State = 149; Match(MEM_DIR);
				State = 150; Match(COMA);
				State = 151; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; Match(COD_OP_F3);
				State = 153; expresion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirecto3Context : ParserRuleContext {
		public ITerminalNode COD_OP_F3() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F3, 0); }
		public ITerminalNode ARROBA() { return GetToken(Gramatica_CalculadoraParser.ARROBA, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public Indirecto3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterIndirecto3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitIndirecto3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirecto3Context indirecto3() {
		Indirecto3Context _localctx = new Indirecto3Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_indirecto3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(COD_OP_F3);
			State = 157; Match(ARROBA);
			State = 158; expresion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmediato3Context : ParserRuleContext {
		public ITerminalNode COD_OP_F3() { return GetToken(Gramatica_CalculadoraParser.COD_OP_F3, 0); }
		public ITerminalNode HASHTAG() { return GetToken(Gramatica_CalculadoraParser.HASHTAG, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public Inmediato3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterInmediato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitInmediato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmediato3Context inmediato3() {
		Inmediato3Context _localctx = new Inmediato3Context(_ctx, State);
		EnterRule(_localctx, 38, RULE_inmediato3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(COD_OP_F3);
			State = 161; Match(HASHTAG);
			State = 162; expresion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode CONSTHEX() { return GetToken(Gramatica_CalculadoraParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(Gramatica_CalculadoraParser.CONSTCAD, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_opdirectiva);
		try {
			State = 167;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CONSTHEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164; Match(CONSTHEX);
				}
				break;
			case CONSTCAD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; Match(CONSTCAD);
				}
				break;
			case PARENI:
			case MENOS:
			case NUM:
			case MEM_DIR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; expresion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ITerminalNode PARENI() { return GetToken(Gramatica_CalculadoraParser.PARENI, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ITerminalNode PAREND() { return GetToken(Gramatica_CalculadoraParser.PAREND, 0); }
		public Expresion2Context expresion2() {
			return GetRuleContext<Expresion2Context>(0);
		}
		public ITerminalNode MENOS() { return GetToken(Gramatica_CalculadoraParser.MENOS, 0); }
		public ITerminalNode MEM_DIR() { return GetToken(Gramatica_CalculadoraParser.MEM_DIR, 0); }
		public ITerminalNode NUM() { return GetToken(Gramatica_CalculadoraParser.NUM, 0); }
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		ExpresionContext _localctx = new ExpresionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_expresion);
		try {
			State = 182;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PARENI:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; Match(PARENI);
				State = 170; expresion();
				State = 171; Match(PAREND);
				State = 172; expresion2();
				}
				break;
			case MENOS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; Match(MENOS);
				State = 175; expresion();
				State = 176; expresion2();
				}
				break;
			case MEM_DIR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178; Match(MEM_DIR);
				State = 179; expresion2();
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 180; Match(NUM);
				State = 181; expresion2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expresion2Context : ParserRuleContext {
		public ITerminalNode FORMATO4() { return GetToken(Gramatica_CalculadoraParser.FORMATO4, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public Expresion2Context expresion2() {
			return GetRuleContext<Expresion2Context>(0);
		}
		public ITerminalNode MENOS() { return GetToken(Gramatica_CalculadoraParser.MENOS, 0); }
		public ITerminalNode POR() { return GetToken(Gramatica_CalculadoraParser.POR, 0); }
		public ITerminalNode ENTRE() { return GetToken(Gramatica_CalculadoraParser.ENTRE, 0); }
		public Expresion2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.EnterExpresion2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatica_CalculadoraListener typedListener = listener as IGramatica_CalculadoraListener;
			if (typedListener != null) typedListener.ExitExpresion2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatica_CalculadoraVisitor<TResult> typedVisitor = visitor as IGramatica_CalculadoraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expresion2Context expresion2() {
		Expresion2Context _localctx = new Expresion2Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_expresion2);
		try {
			State = 201;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; Match(FORMATO4);
				State = 185; expresion();
				State = 186; expresion2();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; Match(MENOS);
				State = 189; expresion();
				State = 190; expresion2();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192; Match(POR);
				State = 193; expresion();
				State = 194; expresion2();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 196; Match(ENTRE);
				State = 197; expresion();
				State = 198; expresion2();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \xCE\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3;\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4\x43\n\x4\x3\x5\x5\x5\x46\n\x5\x3\x6\x3\x6\a\x6J\n\x6\f"+
		"\x6\xE\x6M\v\x6\x3\a\x3\a\x5\aQ\n\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t`\n\t\x3\n\x3\n\x3\n\x3\n\x5\n\x66"+
		"\n\n\x3\v\x3\v\x3\f\x5\fk\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"s\n\xE\x3\xF\x3\xF\x3\xF\x5\xFx\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x84\n\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x8A\n\x11\x3\x12\x6\x12\x8D\n\x12\r\x12\xE\x12\x8E"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x9D\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x5\x16\xAA\n\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x5\x17\xB9\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x5\x18\xCC\n\x18\x3\x18\x2\x2\x2\x19\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x2\x3\x5\x2\n\f\xE\xE\x10\x11\xD3\x2\x30"+
		"\x3\x2\x2\x2\x4:\x3\x2\x2\x2\x6\x42\x3\x2\x2\x2\b\x45\x3\x2\x2\x2\nG\x3"+
		"\x2\x2\x2\fP\x3\x2\x2\x2\xER\x3\x2\x2\x2\x10_\x3\x2\x2\x2\x12\x65\x3\x2"+
		"\x2\x2\x14g\x3\x2\x2\x2\x16j\x3\x2\x2\x2\x18l\x3\x2\x2\x2\x1Ar\x3\x2\x2"+
		"\x2\x1Cw\x3\x2\x2\x2\x1E\x83\x3\x2\x2\x2 \x89\x3\x2\x2\x2\"\x8C\x3\x2"+
		"\x2\x2$\x9C\x3\x2\x2\x2&\x9E\x3\x2\x2\x2(\xA2\x3\x2\x2\x2*\xA9\x3\x2\x2"+
		"\x2,\xB8\x3\x2\x2\x2.\xCB\x3\x2\x2\x2\x30\x31\x5\x4\x3\x2\x31\x32\x5\n"+
		"\x6\x2\x32\x33\x5\x6\x4\x2\x33\x3\x3\x2\x2\x2\x34\x35\x5\x16\f\x2\x35"+
		"\x36\a\r\x2\x2\x36\x37\a\x1D\x2\x2\x37\x38\a\x1F\x2\x2\x38;\x3\x2\x2\x2"+
		"\x39;\x5\f\a\x2:\x34\x3\x2\x2\x2:\x39\x3\x2\x2\x2;\x5\x3\x2\x2\x2<=\a"+
		"\xF\x2\x2=>\x5\b\x5\x2>?\a\x1F\x2\x2?\x43\x3\x2\x2\x2@\x41\a\xF\x2\x2"+
		"\x41\x43\x5\b\x5\x2\x42<\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x43\a\x3\x2\x2\x2"+
		"\x44\x46\a\x1E\x2\x2\x45\x44\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\t\x3"+
		"\x2\x2\x2GK\x5\f\a\x2HJ\x5\f\a\x2IH\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2"+
		"\x2\x2KL\x3\x2\x2\x2L\v\x3\x2\x2\x2MK\x3\x2\x2\x2NQ\x5\xE\b\x2OQ\x5\x10"+
		"\t\x2PN\x3\x2\x2\x2PO\x3\x2\x2\x2Q\r\x3\x2\x2\x2RS\x5\x16\f\x2ST\x5\x18"+
		"\r\x2TU\a\x1F\x2\x2U\xF\x3\x2\x2\x2VW\x5\x16\f\x2WX\x5\x14\v\x2XY\x5*"+
		"\x16\x2YZ\a\x1F\x2\x2Z`\x3\x2\x2\x2[\\\x5\x16\f\x2\\]\x5\x12\n\x2]^\a"+
		"\x1F\x2\x2^`\x3\x2\x2\x2_V\x3\x2\x2\x2_[\x3\x2\x2\x2`\x11\x3\x2\x2\x2"+
		"\x61\x62\a\x12\x2\x2\x62\x66\x5,\x17\x2\x63\x64\a\x12\x2\x2\x64\x66\a"+
		"\x1B\x2\x2\x65\x61\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66\x13\x3\x2\x2\x2"+
		"gh\t\x2\x2\x2h\x15\x3\x2\x2\x2ik\a\x1E\x2\x2ji\x3\x2\x2\x2jk\x3\x2\x2"+
		"\x2k\x17\x3\x2\x2\x2lm\x5\x1A\xE\x2m\x19\x3\x2\x2\x2ns\x5\x1C\xF\x2os"+
		"\x5\x1E\x10\x2ps\x5 \x11\x2qs\x5\"\x12\x2rn\x3\x2\x2\x2ro\x3\x2\x2\x2"+
		"rp\x3\x2\x2\x2rq\x3\x2\x2\x2s\x1B\x3\x2\x2\x2tu\a\x6\x2\x2ux\a\x1F\x2"+
		"\x2vx\a\x6\x2\x2wt\x3\x2\x2\x2wv\x3\x2\x2\x2x\x1D\x3\x2\x2\x2yz\a\a\x2"+
		"\x2z\x84\a\t\x2\x2{|\a\a\x2\x2|}\a\t\x2\x2}~\a\x16\x2\x2~\x84\a\t\x2\x2"+
		"\x7F\x80\a\a\x2\x2\x80\x81\a\t\x2\x2\x81\x82\a\x16\x2\x2\x82\x84\a\x1D"+
		"\x2\x2\x83y\x3\x2\x2\x2\x83{\x3\x2\x2\x2\x83\x7F\x3\x2\x2\x2\x84\x1F\x3"+
		"\x2\x2\x2\x85\x8A\x5$\x13\x2\x86\x8A\x5&\x14\x2\x87\x8A\x5(\x15\x2\x88"+
		"\x8A\a\x5\x2\x2\x89\x85\x3\x2\x2\x2\x89\x86\x3\x2\x2\x2\x89\x87\x3\x2"+
		"\x2\x2\x89\x88\x3\x2\x2\x2\x8A!\x3\x2\x2\x2\x8B\x8D\a\x15\x2\x2\x8C\x8B"+
		"\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2"+
		"\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x5 \x11\x2\x91#\x3\x2\x2\x2\x92\x93\a"+
		"\b\x2\x2\x93\x94\a\x1D\x2\x2\x94\x95\a\x16\x2\x2\x95\x9D\a\t\x2\x2\x96"+
		"\x97\a\b\x2\x2\x97\x98\a\x1E\x2\x2\x98\x99\a\x16\x2\x2\x99\x9D\a\t\x2"+
		"\x2\x9A\x9B\a\b\x2\x2\x9B\x9D\x5,\x17\x2\x9C\x92\x3\x2\x2\x2\x9C\x96\x3"+
		"\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9D%\x3\x2\x2\x2\x9E\x9F\a\b\x2\x2\x9F\xA0"+
		"\a\x13\x2\x2\xA0\xA1\x5,\x17\x2\xA1\'\x3\x2\x2\x2\xA2\xA3\a\b\x2\x2\xA3"+
		"\xA4\a\x14\x2\x2\xA4\xA5\x5,\x17\x2\xA5)\x3\x2\x2\x2\xA6\xAA\a\x3\x2\x2"+
		"\xA7\xAA\a\x4\x2\x2\xA8\xAA\x5,\x17\x2\xA9\xA6\x3\x2\x2\x2\xA9\xA7\x3"+
		"\x2\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA+\x3\x2\x2\x2\xAB\xAC\a\x18\x2\x2\xAC"+
		"\xAD\x5,\x17\x2\xAD\xAE\a\x19\x2\x2\xAE\xAF\x5.\x18\x2\xAF\xB9\x3\x2\x2"+
		"\x2\xB0\xB1\a\x1A\x2\x2\xB1\xB2\x5,\x17\x2\xB2\xB3\x5.\x18\x2\xB3\xB9"+
		"\x3\x2\x2\x2\xB4\xB5\a\x1E\x2\x2\xB5\xB9\x5.\x18\x2\xB6\xB7\a\x1D\x2\x2"+
		"\xB7\xB9\x5.\x18\x2\xB8\xAB\x3\x2\x2\x2\xB8\xB0\x3\x2\x2\x2\xB8\xB4\x3"+
		"\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9-\x3\x2\x2\x2\xBA\xBB\a\x15\x2\x2\xBB"+
		"\xBC\x5,\x17\x2\xBC\xBD\x5.\x18\x2\xBD\xCC\x3\x2\x2\x2\xBE\xBF\a\x1A\x2"+
		"\x2\xBF\xC0\x5,\x17\x2\xC0\xC1\x5.\x18\x2\xC1\xCC\x3\x2\x2\x2\xC2\xC3"+
		"\a\x1B\x2\x2\xC3\xC4\x5,\x17\x2\xC4\xC5\x5.\x18\x2\xC5\xCC\x3\x2\x2\x2"+
		"\xC6\xC7\a\x1C\x2\x2\xC7\xC8\x5,\x17\x2\xC8\xC9\x5.\x18\x2\xC9\xCC\x3"+
		"\x2\x2\x2\xCA\xCC\x3\x2\x2\x2\xCB\xBA\x3\x2\x2\x2\xCB\xBE\x3\x2\x2\x2"+
		"\xCB\xC2\x3\x2\x2\x2\xCB\xC6\x3\x2\x2\x2\xCB\xCA\x3\x2\x2\x2\xCC/\x3\x2"+
		"\x2\x2\x13:\x42\x45KP_\x65jrw\x83\x89\x8E\x9C\xA9\xB8\xCB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Calculadora
